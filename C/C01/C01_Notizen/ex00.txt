Ziel der Übung

    Schreibe eine Funktion, die den Wert der int-Variable setzt, auf die ein Pointer zeigt – konkret auf 42.

    Prototyp: void ft_ft(int *nbr);

    Erlaubte Funktionen: keine (also auch kein write, printf, … in dieser Datei).

Lösungsidee

    nbr ist ein Pointer auf int.

    Mit *nbr dereferenziere ich ihn, also greife auf die Variable an dieser Adresse zu.

    *nbr = 42; schreibt 42 in die ursprüngliche Variable.
    
    Warum kein #include?

    Die Funktion benutzt keine externe Funktion oder Typdefinition.

    Laut Norm/Subject ist hier kein Include nötig – also weggelassen.

Norm-Punkte, die ich beachtet habe

    snake_case, nur Kleinbuchstaben/_.

    Eine Funktion, ≤ 25 Zeilen (ohne die Klammern).

    Tabs zur Einrückung (Breite 4).

    Keine Kommentare im Funktionskörper.

    Keine gemischte Deklaration/Initialisierung (hier nicht relevant).

    Dateiname/Ordner in lower_snake_case.

Test (separate main.c, nicht abgeben)

    In der privaten main.c deklariere ich nur den Prototyp (void ft_ft(int *nbr);), lege eine int x; an, rufe ft_ft(&x); auf und gebe x aus.

    Da printf nicht erlaubt ist, habe ich zur Demo die Zahl in ASCII-Ziffern umgerechnet (/10, %10, +'0') und mit write ausgegeben (nur in main.c, nicht in ft_ft.c).

Ergebnis: Nach ft_ft(&x); ist x == 42.
