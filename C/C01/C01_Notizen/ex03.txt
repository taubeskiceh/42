Was soll ex03 tun?

Du schreibst eine Funktion, die aus zwei Ganzzahlen a und b:

    den Ganzzahl-Quotienten a / b in *div speichert und

    den Ganzzahl-Rest a % b in *mod speichert.

Prototyp

void ft_div_mod(int a, int b, int *div, int *mod);

Warum Zeiger (Pointer)?

In C werden Argumente per Wert übergeben. Wenn du Ergebnisse an den Aufrufer zurückgeben willst, ohne einen Struct zu bauen oder mehrere Werte zu returnen, gibst du Adressen mit:

    div zeigt auf eine int-Variable, in die der Quotient geschrieben wird.

    mod zeigt auf eine int-Variable, in die der Rest geschrieben wird.

Was passiert in der Funktion?

Minimal-Lösung (deine Abgabe):

void	ft_div_mod(int a, int b, int *div, int *mod)
{
	*div = a / b;
	*mod = a % b;
}

    *div = a / b; berechnet den Ganzzahl-Quotienten und schreibt ihn an die Adresse, auf die div zeigt.

    *mod = a % b; berechnet den Rest und schreibt ihn an die Adresse, auf die mod zeigt.

Mathematische Details & Randfälle

    Ganzzahl-Division in C (C99+): Richtung 0 (truncation toward zero).
    Beispiele: 7/3 = 2, (-7)/3 = -2, 7/(-3) = -2.

    Restzeichen: Das Vorzeichen von a % b folgt dem Dividend a.
    Beispiele: 7%3 = 1, (-7)%3 = -1, 7%(-3) = 1.

    Division durch 0: Nicht definiert. Das Subject setzt in der Regel voraus, dass b != 0 ist.
    → In der Abgabe keinen Extra-Check einbauen (Moulinette erwartet die Minimal-Implementierung).
    → Für deine Tests kannst du natürlich b sinnvoll wählen.

Beispiel: Nutzung in main.c (nur lokal)

#include <unistd.h>

void	ft_div_mod(int a, int b, int *div, int *mod);

static void	putnbr(int n)
{
	char c;

	if (n == -2147483648)
	{
		write(1, "-2147483648", 11);
		return ;
	}
	if (n < 0)
	{
		write(1, "-", 1);
		n = -n;
	}
	if (n >= 10)
		putnbr(n / 10);
	c = (char)((n % 10) + '0');
	write(1, &c, 1);
}

int	main(void)
{
	int a;
	int b;
	int d;
	int m;

	a = 42;
	b = 10;
	ft_div_mod(a, b, &d, &m);
	write(1, "div=", 4); putnbr(d);
	write(1, " mod=", 5); putnbr(m);
	write(1, "\n", 1);
	return (0);
}

Kompilieren:

cc -Wall -Wextra -Werror main.c ex03/ft_div_mod.c -o t03 && ./t03
# Ausgabe: div=4 mod=2

Weitere sinnvolle Tests:

    a = -42, b = 10 → div=-4, mod=-2

    a = 42, b = -10 → div=-4, mod=2

    a = -42, b = -10 → div=4, mod=-2

